import random
from abc import ABC, abstractmethod
from colorama import Fore, Back, Style


class GameRules:
    def message(self):
        print('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –º–æ—Ä—è–∫ üëã! –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã "–ú–æ—Ä—Å–∫–æ–π –±–æ–π" –ø—Ä–æ—Å—Ç—ã:'
              '\n 1) –ë–∞–∑–æ–≤—ã–π —Ñ–ª–æ—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 4 –æ–¥–Ω–æ–ø–∞–ª—É–±–Ω—ã—Ö –∫–∞—Ç–µ—Ä–æ–≤, '
              '\n 2 –¥–≤—É—Ö–ø–∞–ª—É–±–Ω—ã—Ö —ç—Å–º–∏–Ω—Ü–µ–≤ –∏ 1 —Ç—Ä–µ—Ö–ø–∞–ª—É–±–Ω–æ–≥–æ –∫—Ä–µ–π—Å–µ—Ä–∞;'
              '\n 2) –ó–∞–¥–∞—á–∞ - –ø–µ—Ä–≤—ã–º "—É—Ç–æ–ø–∏—Ç—å" –∫–æ—Ä–∞–±–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞;'
              '\n 3) –ö–∞–∂–¥–∞—è –ø–æ–∑–∏—Ü–∏—è –ø—Ä–æ–±–∏–≤–∞–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞;'
              '\n 4) –ö–æ—Ä–∞–±–ª–∏ —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –Ω–µ –º–µ–Ω–µ–µ –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏ –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞.'
              '\n –£–¥–∞—á–Ω–æ–≥–æ –±–æ—è ü§û!')


class GameField:
    def __init__(self):
        self.grid = [[' '] + [str(i) for i in range(1, 7)]]
        self.grid += [[str(i)] + ['‚óØ'] * 6 for i in range(1, 7)]

    def print_field(self):
        for rows in self.grid:
            print(' | '.join(rows))
        print()

    def reset_field(self):
        self.grid = [[' '] + [str(i) for i in range(1, 7)]]
        self.grid += [[str(i)] + ['‚óØ'] * 6 for i in range(1, 7)]


# –ö–ª–∞—Å—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–π
class Restrictions:
    def __init__(self):
        self.game_field = GameField()

    def neighbours(self, point1, point2):
        dx = abs(point1[0] - point2[0])
        dy = abs(point1[1] - point2[1])
        return dx <= 1 and dy <= 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–≤—É—Ö-
    # –∏ —Ç—Ä–µ—Ö–ø–∞–ª—É–±–Ω—ã—Ö –∫–æ—Ä–∞–±–ª–µ–π
    def can_place_ships(self, cells, size, amount):
        available_cells = cells.copy()

        for _ in range(amount):
            ship_placed = False

            for i in range(len(available_cells)):
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                if i + size - 1 < len(available_cells):
                    if all(available_cells[k] == (available_cells[k - 1][0] + 1, available_cells[k - 1][1])
                           for k in range(i + 1, i + size)):
                        ship_placed = True
                        available_cells = available_cells[:i] + available_cells[i + size:]
                        break

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                if i + size - 1 < len(available_cells):
                    if all(available_cells[k] == (available_cells[k - 1][0], available_cells[k - 1][1] + 1)
                           for k in range(i + 1, i + size)):
                        ship_placed = True
                        available_cells = available_cells[:i] + available_cells[i + size:]
                        break
                if not ship_placed:
                    continue
            if not ship_placed:
                return False
        return True


# –ö–ª–∞—Å—Å –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
# –∫–ª–µ—Ç–æ–∫: ‚óØ –∏ –Ω–µ –∏–º–µ—é—Ç —Å–æ—Å–µ–¥–µ–π
class FindFreeCells:
    def __init__(self):
        self.available_cells = []
        self.restriction = Restrictions()

    def find_free_cells(self, field):

        empty_cells = [(i, j) for i in range(1, 7)
                       for j in range(1, 7) if field[i][j] == '‚óØ']
        filled_cells = [(i, j) for i in range(1, 7)
                        for j in range(1, 7) if field[i][j] == '‚ñ†']

        self.available_cells = [free_cell for free_cell in empty_cells
                                if not any(self.restriction.neighbours(free_cell, filled_coords)
                                for filled_coords in filled_cells)]

        return self.available_cells


# –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º: –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –º–µ—Ç–æ–¥—ã,
# –æ–±—â–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ (–∫–æ–æ—Ä–∏–¥–Ω–∞—Ç—ã + –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
class ChoiceInterface(ABC):
    @abstractmethod
    def coordinates(self):
        pass

    @abstractmethod
    def choose_direction(self):
        pass

    @abstractmethod
    def get_coordinates(self):
        pass

    def get_direction(self):
        pass


class UserChoice(ChoiceInterface):
    def __init__(self):
        self.x = None
        self.y = None
        self.direction = None

    def coordinates(self):
        while True:
            try:
                self.y = int(input('–í–≤–µ–¥–∏—Ç–µ X-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É: '))
                self.x = int(input('–í–≤–µ–¥–∏—Ç–µ Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É: '))
                if 1 <= self.x <= 6 and 1 <= self.y <= 6:
                    return self.x, self.y
                print('–í—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø–æ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
            except ValueError:
                print('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

    def choose_direction(self):
        while True:
            self.direction = input('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (left/right/up/down): ')
            if self.direction in ['left', 'right', 'up', 'down']:
                return self.direction
            else:
                print('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

    def get_coordinates(self):
        return self.x, self.y

    def get_direction(self):
        return self.direction


class RandomChoice(ChoiceInterface):
    def __init__(self):
        self.x = None
        self.y = None
        self.direction = None

    def coordinates(self):
        self.x = random.randint(1, 6)
        self.y = random.randint(1, 6)
        return self.x, self.y

    def choose_direction(self):
        self.direction = random.choice(['left', 'right', 'up', 'down'])
        return self.direction

    def get_coordinates(self):
        return self.x, self.y

    def get_direction(self):
        return self.direction


# –ö–ª–∞—Å—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è–º–∏
class Ships:
    def __init__(self, choice: ChoiceInterface):
        self.game_field = GameField()
        self.conditions = Restrictions()
        self.free_cells = FindFreeCells()
        self.coords = []
        self.cells = []
        self.choice = choice

    def reset_field(self):
        self.game_field.reset_field()
        self.coords = []

    def place_ships(self, size, amount):
        placed_ships = 0

        while placed_ships < amount:
            x, y = self.choice.coordinates()

            if size == 1:

                for old_coord in self.coords:
                    if self.conditions.neighbours((x, y), old_coord):
                        print('–°–æ—Å–µ–¥–Ω–∏–π –∫–æ—Ä–∞–±–ª—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
                        break
                else:  # –ï—Å–ª–∏ –≤—Å–µ –æ–∫, —Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–∞–±–ª—å
                    if self.game_field.grid[x][y] == '‚óØ':
                        self.game_field.grid[x][y] = '‚ñ†'
                        self.coords.append((x, y))
                        placed_ships += 1
                        self.game_field.print_field()
                    else:
                        print('–ü–æ–∑–∏—Ü–∏—è –∑–∞–Ω—è—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

            else:
                direction = self.choice.choose_direction()

                if direction in ['left', 'right']:
                    dy = -1 if direction == 'left' else 1
                    if (all(1 <= y + dy * i <= 6 for i in range(size))
                            and all(self.game_field.grid[x][y + dy * i] == '‚óØ'
                                    for i in range(size))):
                        if not any(self.conditions.neighbours((x, y + dy * i), old_coord)
                                   for i in range(size) for old_coord in self.coords):

                            for i in range(size):
                                self.game_field.grid[x][y + dy * i] = '‚ñ†'
                                self.coords.append((x, y + dy * i))
                            placed_ships += 1
                            self.game_field.print_field()
                        else:
                            print('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
                    else:
                        print('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

                if direction in ['up', 'down']:
                    dx = -1 if direction == 'up' else 1
                    if (all(1 <= x + dx * i <= 6 for i in range(size))
                            and all(self.game_field.grid[x + dx * i][y] == '‚óØ'
                                    for i in range(size))):
                        if not any(self.conditions.neighbours((x + dx * i, y), old_coord)
                                   for i in range(size) for old_coord in self.coords):

                            for i in range(size):
                                self.game_field.grid[x + dx * i][y] = '‚ñ†'
                                self.coords.append((x + dx * i, y))
                            placed_ships += 1
                            self.game_field.print_field()
                        else:
                            print('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
                    else:
                        print('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

            self.cells = self.free_cells.find_free_cells(self.game_field.grid)


# –ù–µ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –≤–æ–∑–≤—Ä–∞—â–∞–ª –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –ø–æ–ª–µ,
# –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–µ–π –≤ RandomField
class ComputerShips(Ships):
    def __init__(self):
        # –í—ã–∑–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ (__init__ –º–µ—Ç–æ–¥) —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ (Ships)
        # –∏–∑ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –∫–ª–∞—Å—Å–∞ (ComputerShips)
        super().__init__(RandomChoice())
        self.restrictions = Restrictions()
        self.game_field = GameField()

    def computer_placing(self):

        while True:
            self.place_ships(1, 4)

            if self.restrictions.can_place_ships(self.cells, 2, 2):
                self.place_ships(2, 2)
                if self.restrictions.can_place_ships(self.cells, 3, 1):
                    self.place_ships(3, 1)
                    self.game_field.print_field()
                    print(self.game_field.grid)
                    break
                else:
                    pass
            else:
                pass


class RandomField:
    def __init__(self):
        self.bombarded_dots = []
        self.fields = [[[' ', '1', '2', '3', '4', '5', '6'], ['1', '‚ñ†', '‚ñ†', '‚ñ†', '‚óØ', '‚óØ', '‚óØ'],
                        ['2', '‚óØ', '‚óØ', '‚óØ', '‚óØ', '‚óØ', '‚ñ†'], ['3', '‚óØ', '‚ñ†', '‚óØ', '‚ñ†', '‚óØ', '‚óØ'],
                        ['4', '‚óØ', '‚ñ†', '‚óØ', '‚óØ', '‚óØ', '‚ñ†'], ['5', '‚óØ', '‚óØ', '‚óØ', '‚óØ', '‚óØ', '‚óØ'],
                       ['6', '‚ñ†', '‚ñ†', '‚óØ', '‚óØ', '‚ñ†', '‚óØ']],

                       [[' ', '1', '2', '3', '4', '5', '6'], ['1', '‚ñ†', '‚óØ', '‚óØ', '‚ñ†', '‚ñ†', '‚óØ'],
                        ['2', '‚óØ', '‚óØ', '‚óØ', '‚óØ', '‚óØ', '‚óØ'], ['3', '‚ñ†', '‚óØ', '‚ñ†', '‚óØ', '‚óØ', '‚óØ'],
                        ['4', '‚ñ†', '‚óØ', '‚óØ', '‚óØ', '‚óØ', '‚ñ†'], ['5', '‚óØ', '‚óØ', '‚óØ', '‚óØ', '‚óØ', '‚óØ'],
                        ['6', '‚ñ†', '‚óØ', '‚ñ†', '‚ñ†', '‚ñ†', '‚óØ']],

                       [[' ', '1', '2', '3', '4', '5', '6'], ['1', '‚óØ', '‚óØ', '‚óØ', '‚óØ', '‚óØ', '‚óØ'],
                        ['2', '‚ñ†', '‚óØ', '‚ñ†', '‚ñ†', '‚óØ', '‚ñ†'], ['3', '‚óØ', '‚óØ', '‚óØ', '‚óØ', '‚óØ', '‚óØ'],
                        ['4', '‚óØ', '‚óØ', '‚ñ†', '‚óØ', '‚ñ†', '‚óØ'], ['5', '‚ñ†', '‚óØ', '‚ñ†', '‚óØ', '‚óØ', '‚óØ'],
                        ['6', '‚ñ†', '‚óØ', '‚ñ†', '‚óØ', '‚óØ', '‚ñ†']],

                       [[' ', '1', '2', '3', '4', '5', '6'], ['1', '‚óØ', '‚ñ†', '‚óØ', '‚óØ', '‚ñ†', '‚óØ'],
                        ['2', '‚óØ', '‚ñ†', '‚óØ', '‚óØ', '‚óØ', '‚óØ'], ['3', '‚óØ', '‚óØ', '‚óØ', '‚ñ†', '‚ñ†', '‚ñ†'],
                        ['4', '‚ñ†', '‚ñ†', '‚óØ', '‚óØ', '‚óØ', '‚óØ'], ['5', '‚óØ', '‚óØ', '‚óØ', '‚óØ', '‚óØ', '‚ñ†'],
                        ['6', '‚óØ', '‚ñ†', '‚óØ', '‚ñ†', '‚óØ', '‚óØ']],

                       [[' ', '1', '2', '3', '4', '5', '6'], ['1', '‚ñ†', '‚ñ†', '‚óØ', '‚ñ†', '‚ñ†', '‚ñ†'],
                        ['2', '‚óØ', '‚óØ', '‚óØ', '‚óØ', '‚óØ', '‚óØ'], ['3', '‚óØ', '‚óØ', '‚ñ†', '‚óØ', '‚óØ', '‚óØ'],
                        ['4', '‚ñ†', '‚óØ', '‚óØ', '‚óØ', '‚ñ†', '‚óØ'], ['5', '‚óØ', '‚óØ', '‚óØ', '‚óØ', '‚óØ', '‚óØ'],
                        ['6', '‚ñ†', '‚ñ†', '‚óØ', '‚ñ†', '‚óØ', '‚óØ']],

                       [[' ', '1', '2', '3', '4', '5', '6'], ['1', '‚ñ†', '‚ñ†', '‚ñ†', '‚óØ', '‚ñ†', '‚ñ†'],
                        ['2', '‚óØ', '‚óØ', '‚óØ', '‚óØ', '‚óØ', '‚óØ'], ['3', '‚óØ', '‚ñ†', '‚óØ', '‚ñ†', '‚óØ', '‚óØ'],
                        ['4', '‚óØ', '‚óØ', '‚óØ', '‚ñ†', '‚óØ', '‚óØ'], ['5', '‚óØ', '‚óØ', '‚óØ', '‚óØ', '‚óØ', '‚ñ†'],
                        ['6', '‚ñ†', '‚óØ', '‚óØ', '‚ñ†', '‚óØ', '‚óØ']],

                       [[' ', '1', '2', '3', '4', '5', '6'], ['1', '‚ñ†', '‚óØ', '‚ñ†', '‚óØ', '‚ñ†', '‚ñ†'],
                        ['2', '‚ñ†', '‚óØ', '‚ñ†', '‚óØ', '‚óØ', '‚óØ'], ['3', '‚ñ†', '‚óØ', '‚óØ', '‚óØ', '‚óØ', '‚óØ'],
                        ['4', '‚óØ', '‚óØ', '‚óØ', '‚ñ†', '‚óØ', '‚óØ'], ['5', '‚ñ†', '‚óØ', '‚óØ', '‚óØ', '‚óØ', '‚ñ†'],
                        ['6', '‚óØ', '‚óØ', '‚óØ', '‚ñ†', '‚óØ', '‚óØ']]

                       ]

    def get_random_field(self):
        return random.choice(self.fields)

    # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–ª–∞—Å—Å–µ Game
    def set_random_field(self, x, y, symbol):
        self.fields[x][y] = symbol


# –ü–æ–ª–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —é–∑–µ—Ä–æ–º
class User:
    def __init__(self):
        self.game_field = GameField()
        self.ships = Ships(UserChoice())
        self.restrictions = Restrictions()
        self.cells = FindFreeCells()
        self.rules = GameRules()
        self.bombarded_dots = []

    def get_user_field(self):
        return self.game_field.grid

    # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–ª–∞—Å—Å–µ Game
    def set_user_field(self, x, y, symbol):
        self.game_field.grid[x][y] = symbol

    def placing_ships(self):
        self.rules.message()
        self.game_field.print_field()

        while True:
            try:
                print('–û–¥–Ω–æ–ø–∞–ª—É–±–Ω—ã–µ –∫–∞—Ç–µ—Ä–∞')
                self.ships.place_ships(1, 4)

                if not self.restrictions.can_place_ships(self.ships.cells, 2, 2):
                    print('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
                    self.ships.reset_field()
                    continue

                print('–î–≤—É—Ö–ø–∞–ª—É–±–Ω—ã–µ —ç—Å–º–∏–Ω—Ü—ã')
                self.ships.place_ships(2, 2)

                if not self.restrictions.can_place_ships(self.ships.cells, 3, 1):
                    print('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
                    self.ships.reset_field()
                    continue

                print('–¢—Ä–µ—Ö–ø–∞–ª—É–±–Ω—ã–π –∫—Ä–µ–π—Å–µ—Ä')
                self.ships.place_ships(3, 1)
                self.game_field.grid = self.ships.game_field.grid
                break
            except Exception as e:
                print(f'–û—à–∏–±–∫–∞: {e}')
                self.ships.reset_field()


class Game:
    def __init__(self):
        self.computer = RandomField()
        self.computer_field = self.computer.get_random_field()

        self.user = User()
        self.empty_field = self.user.get_user_field()
        self.user.placing_ships()
        self.user_field = self.user.get_user_field()

    def print_fields(self, field1, field2):
        for i in range(len(field1)):
            print(' | '.join('{:1s}'.format(x) for x in field1[i]) + '    '
                  + ' | '.join('{:1s}'.format(x) for x in field2[i]))

    def battle(self):
        print('–ö–æ–º–ø—å—é—Ç–µ—Ä —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º. '
              '\n–ù–∞ —ç–∫—Ä–∞–Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø–æ–ª—è –∏ –ø–æ–¥–±–∏—Ç—ã–µ —Ç–æ—á–∫–∏ –Ω–∞ –ø–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞. '
              '\nX - –ø–æ–ø–∞–¥–∞–Ω–∏–µ, –¢ - –ø—Ä–æ–º–∞—Ö ')
        computer_dots = 11
        user_dots = 11

        while True:

            while True:
                x = random.randint(1, 6)
                y = random.randint(1, 6)

                if (x, y) in self.user.bombarded_dots:
                    continue

                if self.user_field[x][y] == '‚ñ†':
                    self.user.set_user_field(x, y, 'ùêó')
                    self.user.bombarded_dots.append((x, y))
                    computer_dots -= 1

                elif self.user_field[x][y] == '‚óØ':
                    self.user.set_user_field(x, y, 'ùêì')
                    self.user.bombarded_dots.append((x, y))
                break

            while True:
                try:
                    y = int(input('–í–≤–µ–¥–∏—Ç–µ X-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É: '))
                    x = int(input('–í–≤–µ–¥–∏—Ç–µ Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É: '))
                    if x not in range(1, 7) or y not in range(1, 7):
                        print('–í—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø–æ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
                        continue
                    if (x, y) in self.computer.bombarded_dots:
                        print('–ü–æ–∑–∏—Ü–∏—è —É–∂–µ –ø–æ–¥–±–∏—Ç–∞!')
                        continue
                except ValueError:
                    print('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
                    continue

                if self.computer_field[x][y] == '‚ñ†':
                    self.computer.set_random_field(x, y, 'ùêó')
                    self.empty_field[x][y] = Fore.RED + 'ùêó' + Style.RESET_ALL
                    self.print_fields(self.user_field, self.empty_field)
                    self.computer.bombarded_dots.append((x, y))
                    user_dots -= 1
                    print('–û—á–∫–∏ –∏–≥—Ä–æ–∫–∞: ', 11 - user_dots)

                elif self.computer_field[x][y] == '‚óØ':
                    self.computer.set_random_field(x, y, 'ùêì')
                    self.empty_field[x][y] = Fore.BLUE + 'ùêì' + Style.RESET_ALL
                    self.print_fields(self.user_field, self.empty_field)
                    self.computer.bombarded_dots.append((x, y))
                break

            if user_dots == 0 and computer_dots > 0:
                print('–ü–æ–±–µ–¥–∞!')
                break
            elif computer_dots == 0 and user_dots > 0:
                print('–ü—Ä–æ–∏–≥—Ä—ã—à!')
                break


game = Game()
game.battle()

